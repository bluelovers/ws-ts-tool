"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("typescript"),i=require("cross-spawn-extra"),o=require("path"),t=require("value-from-record"),r=require("get-current-tsconfig"),n=require("debug-color2/logger");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=_interopDefaultLegacy(e);function tsconfigToCliArgs(e){return Object.entries(e).reduce(((e,[i,o])=>("locale"===i||("boolean"==typeof o?!0===o&&e.push(`--${i}`):(e.push(`--${i}`),e.push(o))),e)),[])}function tsconfigToProgram(i){return Object.entries(i).reduce(((i,[o,r])=>{var n,s,l,c,a;let u=!1;switch(o){case"jsx":r=null!==(n=t.valueFromRecord(r,e.JsxEmit))&&void 0!==n?n:r;break;case"module":r=null!==(s=t.valueFromRecord(r,e.ModuleKind))&&void 0!==s?s:r;break;case"moduleResolution":"node"===r||"nodenext"===r?r=e.ModuleResolutionKind.NodeJs:u=!0;break;case"newLine":"lf"===(null===(l=r)||void 0===l||null===(c=l.toLowerCase)||void 0===c?void 0:c.call(l))?r=e.NewLineKind.LineFeed:u=!0;break;case"target":r=null!==(a=t.valueFromRecord(r,e.ScriptTarget))&&void 0!==a?a:r;break;case"incremental":u=!0}return u||(i[o]=r),i}),{})}function handleOptions(e,i){var t;let n=null==i?void 0:i.cwd;Array.isArray(e)||(e=[e]),n||(n=o.dirname(e[0]));const s=null!==(t=null==i?void 0:i.compilerOptions)&&void 0!==t?t:r.getCurrentTsconfig({...null==i?void 0:i.getCurrentTsconfigOptions,cwd:n}).compilerOptions;return{files:e,cwd:n,bin:(null==i?void 0:i.bin)||"tsc",compilerOptions:s}}function emitTsFiles(e,i){var t,l;let c=null==i?void 0:i.cwd;Array.isArray(e)||(e=[e]),c||(c=o.dirname(o.resolve(process.cwd(),e[0]))),e=e.map((e=>o.resolve(c,e)));let a=null!==(t=null==i?void 0:i.getCurrentTsconfigOptions)&&void 0!==t?t:{},u=tsconfigToProgram(null!==(l=null==i?void 0:i.compilerOptions)&&void 0!==l?l:r.getCurrentTsconfig({...a,cwd:c}).compilerOptions);const d=s.default.createProgram(e,u),g=d.emit(),f=g.emitSkipped?1:0;let p=n.consoleLogger;return f&&(p=p.red),null!=i&&i.verbose&&(s.default.getPreEmitDiagnostics(d).concat(g.diagnostics).forEach((e=>{if(e.file){const{line:i,character:o}=e.file.getLineAndCharacterOfPosition(e.start),t=s.default.flattenDiagnosticMessageText(e.messageText,"\n");p.info("[Diagnostic]",`${e.file.fileName} (${i+1},${o+1}): ${t}`)}else p.info("[Diagnostic]",s.default.flattenDiagnosticMessageText(e.messageText,"\n"))})),p.debug(`[CWD] ${c}`)),f&&p.error(`[Program] Process exiting with code '${f}'.`),{cwd:c,files:e,exitCode:f,emitResult:g,compilerOptions:u,program:d}}exports.default=emitTsFiles,exports.emitTsFiles=emitTsFiles,exports.handleOptions=handleOptions,exports.spawnEmitTsFiles=function spawnEmitTsFiles(e,o){let{cwd:t,compilerOptions:r,files:n,bin:s}=handleOptions(e,o),l=tsconfigToCliArgs(r);return i.sync(s,[...l,"--tsBuildInfoFile",".",n[0]],{cwd:t,stdio:"inherit"})},exports.tsconfigToCliArgs=tsconfigToCliArgs,exports.tsconfigToProgram=tsconfigToProgram;
//# sourceMappingURL=index.cjs.production.min.cjs.map
